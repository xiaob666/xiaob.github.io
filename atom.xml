<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>xiaob blogs</title>
  
  
  <link href="https://xiaob666.github.io/atom.xml" rel="self"/>
  
  <link href="https://xiaob666.github.io/"/>
  <updated>2021-11-11T14:31:29.597Z</updated>
  <id>https://xiaob666.github.io/</id>
  
  <author>
    <name>xiaob</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>kubernete常用指标详解</title>
    <link href="https://xiaob666.github.io/CNCF/kubernete%E5%B8%B8%E7%94%A8%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/"/>
    <id>https://xiaob666.github.io/CNCF/kubernete%E5%B8%B8%E7%94%A8%E7%9B%91%E6%8E%A7%E6%8C%87%E6%A0%87/</id>
    <published>2021-11-11T15:17:27.000Z</published>
    <updated>2021-11-11T14:31:29.597Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、资源"><a href="#1、资源" class="headerlink" title="1、资源"></a>1、资源</h4><p>1.1 CPUThrottlingHigh</p><p>关于 CPU 的 limit 合理性指标。查出最近5分钟，超过25%的 CPU 执行周期受到限制的容器。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(increase(container_cpu_cfs_throttled_periods_total&#123;container!=&quot;&quot;, &#125;[5m])) by (container, pod, namespace) / sum(increase(container_cpu_cfs_periods_total&#123;&#125;[5m])) by (container, pod, namespace) &gt; ( 25 / 100 )</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>container_cpu_cfs_periods_total：容器生命周期中度过的 cpu 周期总数</li><li>container_cpu_cfs_throttled_periods_total：容器生命周期中度过的受限的 cpu 周期总数</li></ul><p>1.2 KubeCPUOvercommit</p><p>集群 CPU 过度使用。CPU 已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的 CPU 总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(namespace:kube_pod_container_resource_requests_cpu_cores:sum&#123;&#125;)/sum(kube_node_status_allocatable_cpu_cores)&gt;(count(kube_node_status_allocatable_cpu_cores)-1) / count(kube_node_status_allocatable_cpu_cores)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_pod_container_resource_requests_cpu_cores：资源 CPU 使用的 cores 数量</li><li>kube_node_status_allocatable_cpu_cores：节点 CPU cores 数量</li></ul><p>1.3 KubeMemoryOvercommit</p><p>集群内存过度使用。内存已经过度使用无法容忍节点故障，节点资源使用的总量超过节点的内存总量，所以如果有节点故障将影响集群资源运行因为所需资源将无法被分配。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(namespace:kube_pod_container_resource_requests_memory_bytes:sum&#123;&#125;)/sum(kube_node_status_allocatable_memory_bytes)&gt;(count(kube_node_status_allocatable_memory_bytes)-1)/count(kube_node_status_allocatable_memory_bytes)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_pod_container_resource_requests_memory_bytes：资源内存使用的量</li><li>kube_node_status_allocatable_memory_bytes：节点内存量</li></ul><p>1.4 KubeCPUQuotaOvercommit</p><p>集群CPU是否超分。查看 CPU 资源分配的额度是否超过进群总额度</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(kube_pod_container_resource_limits_cpu_cores&#123;job=&quot;kube-state-metrics&quot;&#125;)/sum(kube_node_status_allocatable_cpu_cores)&gt; 1.1</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_pod_container_resource_limits_cpu_cores：资源分配的 CPU 资源额度</li><li>kube_node_status_allocatable_cpu_cores：节点 CPU 总量</li></ul><p>1.5 KubeMemoryQuotaOvercommit</p><p>集群超分内存，查看内存资源分配的额度是否超过进群总额度</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(kube_pod_container_resource_limits_memory_bytes&#123;job=&quot;kube-state-metrics&quot;&#125;)/sum(kube_node_status_allocatable_memory_bytes&#123;job=&quot;kube-state-metrics&quot;&#125;)&gt; 1.1</span><br></pre></td></tr></table></figure><p>相关指标:</p><ul><li>kube_pod_container_resource_limits_memory_bytes：资源配额内存量</li><li>kube_node_status_allocatable_memory_bytes：节点内存量</li></ul><p>1.6 KubeMEMQuotaExceeded</p><p>命名空间级内存资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum (kube_pod_container_resource_requests_memory_bytes&#123;job=&quot;kube-state-metrics&quot;&#125; ) by (namespace)/ (sum(kube_pod_container_resource_limits_memory_bytes&#123;job=&quot;kube-state-metrics&quot;&#125;) by (namespace)) &gt; 0.8</span><br></pre></td></tr></table></figure><p>相关指标:</p><ul><li>kube_pod_container_resource_requests_memory_bytes：内存资源使用量</li><li>kube_pod_container_resource_limits_memory_bytes：内存资源最大值</li></ul><p>1.7 KubeCPUQuotaExceeded</p><p>命名空间级 CPU 资源使用的比例，关乎资源配额。当使用 request 和 limit 限制资源时，使用值和最大值还是有一点区别，当有 request 时说明最低分配了这么多资源。需要注意当 request 等于 limit 时那么说明资源已经是100%已经分配使用当监控告警发出的时候需要区分。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum (kube_pod_container_resource_requests_cpu_cores&#123;job=&quot;kube-state-metrics&quot;&#125; ) by (namespace)/ (sum(kube_pod_container_resource_limits_cpu_cores&#123;job=&quot;kube-state-metrics&quot;&#125;) by (namespace)) &gt; 0.8</span><br></pre></td></tr></table></figure><p>相关指标:</p><ul><li>kube_pod_container_resource_requests_cpu_cores：CPU 使用量</li><li>kube_pod_container_resource_limits_cpu_cores：CPU 限额最大值</li></ul><h4 id="2、存储"><a href="#2、存储" class="headerlink" title="2、存储"></a>2、存储</h4><p>2.1 KubePersistentVolumeFillingUp</p><p>PVC 容量监控</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubelet_volume_stats_available_bytes&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125;/kubelet_volume_stats_capacity_bytes&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125;&lt; 0.3</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kubelet_volume_stats_available_bytes：剩余空间</li><li>kubelet_volume_stats_capacity_bytes：空间总量</li></ul><p>2.2 KubePersistentVolumeFillingUp</p><p>磁盘空间耗尽预测：通过PVC资源使用6小时变化率预测 接下来4天的磁盘使用率</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(kubelet_volume_stats_available_bytes&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125;/kubelet_volume_stats_capacity_bytes&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125;) &lt; 0.4andpredict_linear(kubelet_volume_stats_available_bytes&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125;[6h], 4 * 24 * 3600) &lt; 0</span><br></pre></td></tr></table></figure><p>相关指标:</p><ul><li>kubelet_volume_stats_available_bytes：剩余空间</li><li>kubelet_volume_stats_capacity_bytes：空间总量</li></ul><p>2.3 KubePersistentVolumeErrors</p><p>PV 使用状态监控。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube_persistentvolume_status_phase&#123;phase=~&quot;Failed|Pending&quot;,job=&quot;kube-state-metrics&quot;&#125;</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_persistentvolume_status_phase：PV 使用状态</li></ul><h4 id="3-kubernetes-system-相关"><a href="#3-kubernetes-system-相关" class="headerlink" title="3. kubernetes system 相关"></a>3. kubernetes system 相关</h4><p>3.1 KubeVersionMismatch</p><p>组件版本与当前集群版本是否有差异。对比组件版本是否有差异，默认为1 。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(count by (gitVersion) (label_replace(kubernetes_build_info&#123;job!~&quot;kube-dns|coredns&quot;&#125;,&quot;gitVersion&quot;,&quot;$1&quot;,&quot;gitVersion&quot;,&quot;(v[0-9]*.[0-9]*.[0-9]*).*&quot;)))</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kubernetes_build_info：获取组件信息</li></ul><p>3.2 KubeClientErrors</p><p>客户端访问某些接口的错误率。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(sum(rate(rest_client_requests_total&#123;code=~&quot;5..&quot;&#125;[5m])) by (instance, job)/sum(rate(rest_client_requests_total[5m])) by (instance, job))&gt; 0.01</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>rest_client_requests_total：状态码</li></ul><h4 id="4-APIServer-相关"><a href="#4-APIServer-相关" class="headerlink" title="4. APIServer 相关"></a>4. APIServer 相关</h4><p>4.1 KubeAPIErrorsHigh</p><p>APIServer 请求错误率。5分钟内 APIServer 请求错误率。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(rate(apiserver_request_total&#123;job=&quot;apiserver&quot;,code=~&quot;5..&quot;&#125;[5m])) by (resource,subresource,verb)/sum(rate(apiserver_request_total&#123;job=&quot;apiserver&quot;&#125;[5m])) by (resource,subresource,verb) &gt; 0.05</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>apiserver_request_total：APIServer 请求数</li></ul><p>4.2 KubeClientCertificateExpiration</p><p>kubelet 客户端证书过期。监测证书状态7天告警。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apiserver_client_certificate_expiration_seconds_count&#123;job=&quot;apiserver&quot;&#125; &gt; 0 and on(job) histogram_quantile(0.01, sum by (job, le) (rate(apiserver_client_certificate_expiration_seconds_bucket&#123;job=&quot;apiserver&quot;&#125;[5m]))) &lt; 604800</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>apiserver_client_certificate_expiration_seconds_count：证书有效剩余时间</li></ul><p>4.3 AggregatedAPIErrors</p><p>自定义注册的 APIServer 服务可用性监控，当检测到自定义注册的 APIServer 五分钟不用次数达到2次。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum by(name, namespace)(increase(aggregator_unavailable_apiservice_count[5m])) &gt; 2</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>aggregator_unavailable_apiservice_count：监测自定义注册的 APIService 不可用次数。</li></ul><p>4.4 KubeAPIDown</p><p>APIserver 失联，监控 APIServer 服务，失联原因可能是服务 down 还可能是网络出现状况。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">absent(up&#123;job=&quot;apiserver&quot;&#125; == 1)</span><br></pre></td></tr></table></figure><h4 id="5-kubelet-相关"><a href="#5-kubelet-相关" class="headerlink" title="5. kubelet 相关"></a>5. kubelet 相关</h4><p>5.1 KubeNodeNotReady</p><p>节点是否处于就绪状态。检测节点是否为就绪状态，或者可能是 kubelet 服务down 了。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube_node_status_condition&#123;job=&quot;kube-state-metrics&quot;,condition=&quot;Ready&quot;,status=&quot;true&quot;&#125; == 0</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_node_status_condition：节点状态监测</li></ul><p>5.2 KubeNodeUnreachable</p><p>节点状态为 Unreachable。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube_node_spec_unschedulable&#123;job=&quot;kube-state-metrics&quot;&#125; == 1</span><br></pre></td></tr></table></figure><p>5.3 KubeletTooManyPods</p><p>节点运行过多的 Pod，监测节点上运行的 Pods 数量。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(max(kubelet_running_pod_count&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125;) by(instance) * on(instance) group_left(node) kubelet_node_name&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125;) by(node) / max(kube_node_status_capacity_pods&#123;job=&quot;kube-state-metrics&quot;&#125; != 1) by(node) &gt; 0.95</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kubelet_running_pod_count：节点运行的 Pods 数量</li><li>kubelet_node_name：节点名称</li><li>kube_node_status_capacity_pods：节点可运行的最大 Pod 数量</li></ul><p>5.4 KubeNodeReadinessFlapping</p><p>监测集群状态，查看集群内节点状态改变的频率。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(changes(kube_node_status_condition&#123;status=&quot;true&quot;,condition=&quot;Ready&quot;&#125;[15m])) by (node) &gt; 2</span><br></pre></td></tr></table></figure><p>5.5 KubeletDown</p><p>监控 kubelet 服务，down 或者网络出现问题。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">absent(up&#123;job=&quot;kubelet&quot;, metrics_path=&quot;/metrics&quot;&#125; == 1)</span><br></pre></td></tr></table></figure><h4 id="6-集群组件"><a href="#6-集群组件" class="headerlink" title="6. 集群组件"></a>6. 集群组件</h4><p>6.1 KubeSchedulerDown</p><p>KubeScheduler 失联，监测 KubeScheduler 是否正常。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">absent(up&#123;job=&quot;kube-scheduler&quot;&#125; == 1)</span><br></pre></td></tr></table></figure><p>6.2 KubeControllerManagerDown</p><p>监测 KubeControllerManager 服务，Down 或者网络不通。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">absent(up&#123;job=&quot;kube-controller-manager&quot;&#125; == 1)</span><br></pre></td></tr></table></figure><h4 id="7-应用相关"><a href="#7-应用相关" class="headerlink" title="7. 应用相关"></a>7. 应用相关</h4><p>7.1 KubePodCrashLooping</p><p>Pod 重启时间，重启时间超过3m告警。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rate(kube_pod_container_status_restarts_total&#123;job=&quot;kube-state-metrics&quot;&#125;[5m]) * 60 * 3 &gt; 0</span><br></pre></td></tr></table></figure><p>相关指标:</p><ul><li>kube_pod_container_status_restarts_total：重启状态 0 为正常</li></ul><p>7.2 KubePodNotReady</p><p>Pods 没有就绪，检测 Pod 是否就绪。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum by (namespace, pod) (max by(namespace, pod) (kube_pod_status_phase&#123;job=&quot;kube-state-metrics&quot;, phase=~&quot;Pending|Unknown&quot;&#125;) * on(namespace, pod) group_left(owner_kind) max by(namespace, pod, owner_kind) (kube_pod_owner&#123;owner_kind!=&quot;Job&quot;&#125;)) &gt; 0</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_pod_status_phase：Pod 状态</li></ul><p>7.3 KubeDeploymentGenerationMismatch</p><p>Deployment 部署失败，Deployment 生成的资源与定义的资源不匹配。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube_deployment_status_observed_generation&#123;job=&quot;kube-state-metrics&quot;&#125;!=kube_deployment_metadata_generation&#123;job=&quot;kube-state-metrics&quot;&#125;</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li><p>kube_deployment_status_observed_generation：Deployment 生成资源数</p></li><li><p>kube_deployment_metadata_generation：Deployment 定义资源数</p></li></ul><p>7.4 KubeDeploymentReplicasMismatch</p><p>查看 Deplyment 副本是否达到预期。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(kube_deployment_spec_replicas&#123;job=&quot;kube-state-metrics&quot;&#125;!=kube_deployment_status_replicas_available&#123;job=&quot;kube-state-metrics&quot;&#125;) and (changes(kube_deployment_status_replicas_updated&#123;job=&quot;kube-state-metrics&quot;&#125;[3m])==0)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_deployment_spec_replicas           资源定义副本数</li><li>kube_deployment_status_replicas_available     正在运行副本数</li><li>kube_deployment_status_replicas_updated      更新的副本数</li></ul><p>7.5 KubeStatefulSetReplicasMismatch</p><p>监测 StatefulSet 副本是否达到预期。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(kube_statefulset_status_replicas_ready&#123;job=&quot;kube-state-metrics&quot;&#125;!=kube_statefulset_status_replicas&#123;job=&quot;kube-state-metrics&quot;&#125;) and (changes(kube_statefulset_status_replicas_updated&#123;job=&quot;kube-state-metrics&quot;&#125;[5m])==0)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_statefulset_status_replicas_ready：就绪副本数</li><li>kube_statefulset_status_replicas：当前副本数</li><li>kube_statefulset_status_replicas_updated：更新的副本数</li></ul><p>7.6 KubeStatefulSetUpdateNotRolledOut</p><p>StatefulSet  更新失败且未回滚，对比版本号和副本数。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max without (revision) (kube_statefulset_status_current_revision&#123;job=&quot;kube-state-metrics&quot;&#125;unlesskube_statefulset_status_update_revision&#123;job=&quot;kube-state-metrics&quot;&#125;)*(kube_statefulset_replicas&#123;job=&quot;kube-state-metrics&quot;&#125;!=kube_statefulset_status_replicas_updated&#123;job=&quot;kube-state-metrics&quot;&#125;)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_statefulset_status_replicas：每个 StatefulSet 的副本数。</li><li>kube_statefulset_status_replicas_current：每个 StatefulSet 的当前副本数。</li><li>kube_statefulset_status_replicas_ready：每个StatefulSet 的就绪副本数。</li><li>kube_statefulset_status_replicas_updated：每个StatefulSet 的更新副本数。</li><li>kube_statefulset_status_observed_generation：StatefulSet 控制器观察到的生成。</li><li>kube_statefulset_replicas：StatefulSet 所需的副本数。</li><li>kube_statefulset_metadata_generation：表示 StatefulSet 所需状态的特定生成的序列号。</li><li>kube_statefulset_created：创建时间戳。</li><li>kube_statefulset_labels：Kubernetes 标签转换为 Prometheus 标签。</li><li>kube_statefulset_status_current_revision：指示用于按顺序(0，currentReplicas)生成 Pod 的StatefulSet 的版本。</li><li>kube_statefulset_status_update_revision：指示用于按顺序 [replicas-updatedReplicas，replicas] 生成 Pod 的 StatefulSet 的版本。</li></ul><p>7.7 KubeDaemonSetRolloutStuck</p><p>监测 DaemonSet 是否处于就绪状态。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube_daemonset_status_number_ready&#123;job=&quot;kube-state-metrics&quot;&#125;/kube_daemonset_status_desired_number_scheduled&#123;job=&quot;kube-state-metrics&quot;&#125; &lt; 1.00</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_daemonset_status_number_ready：就绪的 DaemonSet</li><li>kube_daemonset_status_desired_number_scheduled：应该调度的 DaemonSet 数量</li></ul><p>7.8 KubeDaemonSetMisScheduled</p><p>DaemonSet  运行在不该运行的节点上面。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kube_daemonset_status_number_misscheduled&#123;job=&quot;kube-state-metrics&quot;&#125; &gt; 0</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_daemonset_status_number_misscheduled：运行在不该运行的节点状态</li></ul><p>7.9 KubeContainerWaiting</p><p>监测哪些容器是在等待状态的。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum by (namespace, pod, container) (kube_pod_container_status_waiting_reason&#123;job=&quot;kube-state-metrics&quot;&#125;) &gt; 0</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>kube_pod_container_status_waiting_reason：容器声明周期过程中的状态，无论是创建成功还是失败都应该是0。</li></ul><h2 id="8-节点相关"><a href="#8-节点相关" class="headerlink" title="8. 节点相关"></a>8. 节点相关</h2><p>8.1 NodeClockNotSynchronising</p><p>主机与时间服务器失联。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">min_over_time(node_timex_sync_status[5m]) == 0</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_timex_sync_status：同步状态。</li></ul><p>8.2 NodeClockSkewDetected</p><p>本地时间偏移量。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_timex_offset_seconds &gt; 0.05 and deriv(node_timex_offset_seconds[5m]) &gt;= 0 ) or (node_timex_offset_seconds &lt; -0.05 and deriv(node_timex_offset_seconds[5m]) &lt;= 0)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_timex_offset_seconds：误差</li></ul><p>8.3 NodeHighNumberConntrackEntriesUsed</p><p>链接状态跟踪。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_nf_conntrack_entries / node_nf_conntrack_entries_limit) &gt; 0.75</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_nf_conntrack_entries：链接状态跟踪表分配的数量</li><li>node_nf_conntrack_entries_limit：表总量</li></ul><p>8.4 NodeNetworkReceiveErrs</p><p>网卡接收错误量。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">increase(node_network_receive_errs_total[2m]) &gt; 10</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_network_receive_errs_total：接收错误总量</li></ul><p>8.5 NodeNetworkTransmitErrs</p><p>网卡传输错误量。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">increase(node_network_transmit_errs_total[2m]) &gt; 10</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_network_transmit_errs_total：传输错误总量</li></ul><p>8.6 NodeFilesystemAlmostOutOfFiles</p><p>inode 数量监测</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_filesystem_files_free&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; / node_filesystem_files&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; * 100 &lt; 5 and node_filesystem_readonly&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; == 0)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_filesystem_files_free：空闲的 inode</li><li>node_filesystem_files：inodes 总量</li></ul><p>8.7 NodeFilesystemFilesFillingUp</p><p>inode 耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的 inodes。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_filesystem_files_free&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; / node_filesystem_files&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; * 100 &lt; 20 and predict_linear(node_filesystem_files_free&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125;[6h], 4*60*60) &lt; 0 and node_filesystem_readonly&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; == 0)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_filesystem_files_free：空闲的 inode</li><li>node_filesystem_files：inodes 总量</li></ul><p>8.8 NodeFilesystemAlmostOutOfSpace</p><p>分区容量使用率。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_filesystem_avail_bytes&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; / node_filesystem_size_bytes&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; * 100 &lt; 10 and node_filesystem_readonly&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; == 0 )</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_filesystem_avail_bytes：空闲容量</li><li>node_filesystem_size_bytes：总容量</li></ul><p>8.9 NodeFilesystemSpaceFillingUp</p><p>分区容量耗尽预测，以6小时曲线变化预测接下来24小时和4小时可能使用的容量。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(node_filesystem_avail_bytes&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; / node_filesystem_size_bytes&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; * 100 &lt; 15 and predict_linear(node_filesystem_avail_bytes&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125;[6h], 4*60*60) &lt; 0 and node_filesystem_readonly&#123;job=&quot;node-exporter&quot;,fstype!=&quot;&quot;&#125; == 0)</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>node_filesystem_avail_bytes：空闲容量</li><li>node_filesystem_size_bytes：总容量</li></ul><h4 id="9-Etcd-相关"><a href="#9-Etcd-相关" class="headerlink" title="9. Etcd 相关"></a>9. Etcd 相关</h4><p>9.1 Etcdlived</p><p>etcd 存活检测。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">up&#123;job=&quot;etcd&quot;&#125; &lt; 1</span><br></pre></td></tr></table></figure><p>9.2 EtcdCluseterUnavailable</p><p>etcd 集群健康检查，down 数量大于集群可允许故障数量。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">count(up&#123;job=&quot;etcd&quot;&#125; == 0) &gt; (count(up&#123;job=&quot;etcd&quot;&#125;) / 2 - 1)</span><br></pre></td></tr></table></figure><p>9.3 EtcdLeaderCheck</p><p>检查 leader。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max(etcd_server_has_leader) != 1</span><br></pre></td></tr></table></figure><p>9.4 EtcdBackendFsync</p><p>etcd io 监测，后端提交 延时。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.99, sum(rate(etcd_disk_backend_commit_duration_seconds_bucket[5m])) by (instance, le)) &gt; 100</span><br></pre></td></tr></table></figure><p>9.5 EtcdWalFsync</p><p>etcd io 监测，文件同步到磁盘延时。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">histogram_quantile(0.99, sum(rate(etcd_disk_wal_fsync_duration_seconds_bucket[5m])) by (instance, le)) &gt; 100</span><br></pre></td></tr></table></figure><p>9.6 EtcdDbSize</p><p>检测数据库大小。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">etcd_debugging_mvcc_db_total_size_in_bytes/1024/1024 &gt; 1024</span><br></pre></td></tr></table></figure><p>9.7 EtcdGrpc</p><p>Grpc 调用速率。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(rate(grpc_server_handled_total&#123;grpc_type=&quot;unary&quot;&#125;[1m])) &gt; 100</span><br></pre></td></tr></table></figure><h4 id="10-CoreDNS-相关"><a href="#10-CoreDNS-相关" class="headerlink" title="10. CoreDNS 相关"></a>10. CoreDNS 相关</h4><p>10.1 DnsRequest</p><p>DNS 查询速率，每分钟查询超过100告警。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum(irate(coredns_dns_request_count_total&#123;zone !=&quot;dropped&quot;&#125;[1m])) &gt; 100</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>coredns_dns_request_count_total：总查询数</li></ul><p>10.2 DnsRequestFaild</p><p>异常查询，异常状态码，不是 NOERROR。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irate(coredns_dns_response_rcode_count_total&#123;rcode!=&quot;NOERROR&quot;&#125; [1m]) &gt; 0</span><br></pre></td></tr></table></figure><p>相关指标：</p><ul><li>coredns_dns_response_rcode_count_total：查询返回状态码</li></ul><p>DNS-Rcode：</p><p>DNS-Rcode 作为 DNS 应答报文中有效的字段，主要用来说明 DNS 应答状态，是排查域名解析失败的重要指标。通常常见的 Rcode 值如下：</p><ul><li>Rcode 值为0，对应的 DNS 应答状态为 NOERROR，意思是成功的响应，即这个域名解析是成功</li><li>Rcode 值为2，对应的 DNS 应答状态为 SERVFAIL，意思是服务器失败，也就是这个域名的权威服务器拒绝响应或者响应 REFUSE，递归服务器返回 Rcode 值为 2 给 CLIENT</li><li>Rcode 值为3，对应的 DNS 应答状态为 NXDOMAIN，意思是不存在的记录，也就是这个具体的域名在权威服务器中并不存在</li><li>Rcode 值为5，对应的 DNS 应答状态为 REFUSE，意思是拒绝，也就是这个请求源IP不在服务的范围内</li></ul><p>10.3 DnsPanic</p><p>DNS 恐慌值，可能收到攻击。</p><p>表达式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">irate(coredns_panic_count_total[1m]) &gt; 100</span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ol><li><a href="https://github.com/coreos/kube-prometheus">https://github.com/coreos/kube-prometheus</a></li><li><a href="https://github.com/kubernetes-monitoring/kubernetes-mixin">https://github.com/kubernetes-monitoring/kubernetes-mixin</a></li><li><a href="https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md">https://github.com/google/cadvisor/blob/master/docs/storage/prometheus.md</a></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1、资源&quot;&gt;&lt;a href=&quot;#1、资源&quot; class=&quot;headerlink&quot; title=&quot;1、资源&quot;&gt;&lt;/a&gt;1、资源&lt;/h4&gt;&lt;p&gt;1.1 CPUThrottlingHigh&lt;/p&gt;
&lt;p&gt;关于 CPU 的 limit 合理性指标。查出最近5分钟，超过25</summary>
      
    
    
    
    <category term="CNCF" scheme="https://xiaob666.github.io/categories/CNCF/"/>
    
    
    <category term="监控" scheme="https://xiaob666.github.io/tags/%E7%9B%91%E6%8E%A7/"/>
    
    <category term="指标" scheme="https://xiaob666.github.io/tags/%E6%8C%87%E6%A0%87/"/>
    
    <category term="kubernete" scheme="https://xiaob666.github.io/tags/kubernete/"/>
    
  </entry>
  
  <entry>
    <title>网络诊断工具</title>
    <link href="https://xiaob666.github.io/Linux/%E7%BD%91%E7%BB%9C%E8%AF%8A%E6%96%AD/"/>
    <id>https://xiaob666.github.io/Linux/%E7%BD%91%E7%BB%9C%E8%AF%8A%E6%96%AD/</id>
    <published>2021-11-08T15:17:27.000Z</published>
    <updated>2021-11-11T14:30:55.242Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网络链路测试工具-Linux系统"><a href="#网络链路测试工具-Linux系统" class="headerlink" title="网络链路测试工具 - Linux系统"></a><strong>网络链路测试工具 - Linux系统</strong></h2><h3 id="MTR"><a href="#MTR" class="headerlink" title="MTR"></a>MTR</h3><p>简介：</p><p>mtr（My traceroute）几乎是所有Linux发行版本预装的网络测试工具。其将 ping 和 <a href="http://traceroute.sourceforge.net/">traceroute</a> 的功能合并，所以功能更强大。mtr默认发送ICMP数据包进行链路探测。您也可以通过“-u”参数来指定使用UDP数据包进行探测。相对于traceroute只会做一次链路跟踪测试，mtr会对链路上的相关节点做持续探测并给出相应的统计信息。所以，mtr能避免节点波动对测试结果的影响，所以其测试结果更正确，建议优先使用。</p><p>相关帮助文档：</p><p><a href="http://www.bitwizard.nl/mtr/">http://www.bitwizard.nl/mtr/</a></p><p><a href="https://help.aliyun.com/knowledge_detail/98706.html">https://help.aliyun.com/knowledge_detail/98706.html</a></p><h3 id="拓展知识点：Traceroute"><a href="#拓展知识点：Traceroute" class="headerlink" title="拓展知识点：Traceroute"></a>拓展知识点：Traceroute</h3><p>traceroute 网络测试工具，用于跟踪Internet协议（IP）数据包传送到目标地址时经过的路径。traceroute先发送小的具有最大存活时间值（Max_TTL）的UDP探测数据包，然后侦听从网关开始的整个链路上的ICMP TIME_EXCEEDED响应。探测从TTL=1开始，TTL值逐步增加，直至接收到ICMP PORT_UNREACHABLE消息。ICMP PORT_UNREACHABLE消息用于标识目标主机已经被定位，或命令已经达到允许跟踪的最大TTL值。traceroute默认发送UDP数据包进行链路探测。可以通过“-I”参数来指定使用ICMP数据包进行探测。</p><p>作用：可以定位从源主机到目标主机之间经过了哪些路由器，以及到达各个路由器的耗时。</p><p>相关帮助文档：</p><p><a href="http://traceroute.sourceforge.net/">http://traceroute.sourceforge.net/</a></p><p><a href="https://linux.die.net/man/8/traceroute">https://linux.die.net/man/8/traceroute</a></p><h2 id="UDP-PPS测试-和-TCP带宽测试"><a href="#UDP-PPS测试-和-TCP带宽测试" class="headerlink" title="UDP PPS测试 和 TCP带宽测试"></a><strong>UDP PPS测试 和</strong> <strong>TCP带宽测试</strong></h2><h3 id="iperf3"><a href="#iperf3" class="headerlink" title="iperf3"></a>iperf3</h3><p>简介：</p><p>iPerf3 是一种用于主动测量 IP 网络上可实现的最大带宽的工具。它支持调整与时序、缓冲区和协议（TCP、UDP、带有 IPv4 和 IPv6 的 SCTP）相关的各种参数。对于每次测试，它都会报告带宽、损耗和其他参数。</p><p>这是一个新的实现，它不与原始 iPerf 共享代码，也不向后兼容。iPerf 最初是由NLANR/DAST开发的。iPerf3 主要由ESnet /劳伦斯伯克利国家实验室 开发。</p><p>相关帮助文档：</p><p><a href="https://iperf.fr/">https://iperf.fr/</a></p><p><a href="http://software.es.net/iperf/index.html">http://software.es.net/iperf/index.html</a></p><h3 id="Netperf"><a href="#Netperf" class="headerlink" title="Netperf"></a>Netperf</h3><p>简介：</p><p>Netperf是一种网络性能的测量工具，主要针对基于<a href="https://baike.baidu.com/item/TCP/33012">TCP</a>或<a href="https://baike.baidu.com/item/UDP/571511">UDP</a>的传输。Netperf根据应用的不同，可以进行不同模式的网络性能测试，即批量数据传输（bulk data transfer）模式和请求/应答（request/reponse）模式。Netperf测试结果所反映的是一个系统能够以多快的速度向另外一个系统发送数据，以及另外一个系统能够以多快的速度接收数据。</p><p>相关帮助文档：</p><p><a href="https://help.aliyun.com/knowledge_detail/55757.html?spm=5176.21213303.J_6704733920.7.4b0f3edavkBkZV&scm=20140722.S_help@@%E7%9F%A5%E8%AF%86%E7%82%B9@@55757.S_hot+os0.ID_55757-RL_pps%E6%B5%8B%E8%AF%95-OR_helpmain-V_2-P0_0">网络性能测试</a></p><p>扩展知识点：</p><p>Pktgen：<a href="https://help.aliyun.com/document_detail/260258.htm?spm=a2c4g.11186623.0.0.36005aa38gqGrL">https://help.aliyun.com/document_detail/260258.htm?spm=a2c4g.11186623.0.0.36005aa38gqGrL</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;网络链路测试工具-Linux系统&quot;&gt;&lt;a href=&quot;#网络链路测试工具-Linux系统&quot; class=&quot;headerlink&quot; title=&quot;网络链路测试工具 - Linux系统&quot;&gt;&lt;/a&gt;&lt;strong&gt;网络链路测试工具 - Linux系统&lt;/strong&gt;&lt;</summary>
      
    
    
    
    <category term="Linux" scheme="https://xiaob666.github.io/categories/Linux/"/>
    
    
    <category term="Linux" scheme="https://xiaob666.github.io/tags/Linux/"/>
    
    <category term="网络" scheme="https://xiaob666.github.io/tags/%E7%BD%91%E7%BB%9C/"/>
    
    <category term="工具" scheme="https://xiaob666.github.io/tags/%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
</feed>
